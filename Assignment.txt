#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_NODES 1000
#define MAX_EDGES 100000

int n; // number of nodes
int m; // number of edges
int k; // source node
int dist[MAX_NODES]; // distance array

struct Edge {
    int u, v, w;
} edges[MAX_EDGES];

void bellman_ford() {
    // initialize distance array
    for (int i = 1; i <= n; i++) {
        dist[i] = INT_MAX;
    }
    dist[k] = 0;

    // relax edges n-1 times
    for (int i = 1; i <= n - 1; i++) {
        for (int j = 0; j < m; j++) {
            int u = edges[j].u;
            int v = edges[j].v;
            int w = edges[j].w;
            if (dist[u] != INT_MAX && dist[u] + w < dist[v]) {
                dist[v] = dist[u] + w;
            }
        }
    }

    // check for negative cycles
    for (int i = 0; i < m; i++) {
        int u = edges[i].u;
        int v = edges[i].v;
        int w = edges[i].w;
        if (dist[u] != INT_MAX && dist[u] + w < dist[v]) {
            printf("Graph contains negative cycle\n");
            exit(EXIT_FAILURE);
        }
    }
}

int main() {
    // read input
    scanf("%d %d %d", &n, &m, &k);
    for (int i = 0; i < m; i++) {
        scanf("%d %d %d", &edges[i].u, &edges[i].v, &edges[i].w);
    }

    // run Bellman-Ford algorithm
    bellman_ford();

    // find maximum distance in distance array
    int max_dist = 0;
    for (int i = 1; i <= n; i++) {
        if (dist[i] == INT_MAX) {
            printf("-1\n");
            return 0;
        }
        if (dist[i] > max_dist) {
            max_dist = dist[i];
        }
    }
    printf("%d\n", max_dist);

    return 0;
}
